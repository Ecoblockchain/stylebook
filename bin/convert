#!/usr/bin/env node

var child_process = require('child_process');
var path = require('path');

var async = require('async');
var del = require('del');
var fs = require('fs-extra');
var read = require('fs-readdir-recursive');

var SRC = path.join(__dirname, '..', 'src');
var DIST = path.join(__dirname, '..', 'dist');
var DOCS = path.join(__dirname, '..', 'docs');

var BOOTSTRAP_LESS = path.join(__dirname, '..', 'node_modules', 'bootstrap');
var BOOTSTRAP_SCSS = path.join(__dirname, '..', 'node_modules', 'bootstrap-sass', 'assets', 'stylesheets');
var BOOTSTRAP_STYL = path.join(__dirname, '..', 'node_modules', 'bootstrap-styl', 'bootstrap');

async.series([
	clean,

	srcToLess,
	lessToScss,
	// scssToSass,
	lessToStyl,
	scssToCss,

	bootstrapToLess,
	bootstrapToScss,
	bootstrapToStyl,
	bootstrapToCss,
	bootstrapAssets,

	docs

], function(err, results) {

	if (err) {
		return console.error(err);
	}
});

function clean(next) {
	del(DIST).then(function() {
		return next();
	});
}

function srcToLess(next) {
	fs.copy(path.join(SRC, 'less'), path.join(DIST, 'less'), next);
}

function lessToScss(next) {

	fs.copy(path.join(DIST, 'less'), path.join(DIST, 'scss'), function(err) {

		if (err) {
			return next(err);
		}

		async.each(read(path.join(DIST, 'scss')), function(file, callback) {
			child_process.execFile('less2sass', [path.join(DIST, 'scss', file), '-d'], callback);
		}, next);
	});
}

function scssToSass(next) {

	fs.copy(path.join(DIST, 'scss'), path.join(DIST, 'sass'), function(err) {

		if (err) {
			return next(err);
		}

		child_process.execFile('sass-convert', [path.join(DIST, 'sass'), '--recursive', '--from', 'scss', '--to', 'sass'], function(err) {

			if (err) {
				return next(err);
			}

			del([path.join(DIST, 'sass', '**/*.scss')]).then(function() {
				return next();
			});
		});

	});
}

function scssToCss(next) {

	fs.ensureDir(path.join(DIST, 'css'), function(err) {

		if (err) {
			return next(err);
		}

		child_process.execFile('sass', ['--sourcemap=none', '--update', path.join(DIST, 'scss') + ':' + path.join(DIST, 'css')], next);
	});
}

function lessToStyl(next) {

	fs.ensureDir(path.join(DIST, 'styl'), function(err) {

		if (err) {
			return next(err);
		}

		async.each(read(path.join(DIST, 'less')), function(file, callback) {
			var target = fs.createWriteStream(path.join(DIST, 'styl', file.substr(0, file.lastIndexOf('.')) + '.styl'), {
				flags: 'a'
			});
			var cmd = child_process.spawn('less2stylus', [path.join(DIST, 'less', file)]);

			cmd.stdout.pipe(target);

			var stderr;

			cmd.stderr.on('data', function(data) {
				stderr += data;
			});

			cmd.on('close', function(code) {

				if (code !== 0) {
					return callback(new Error(stderr || 'child process exited with code ' + code));
				}

				callback();
			});

		}, next);
	});
}

function bootstrapToLess(next) {
	fs.copy(path.join(BOOTSTRAP_LESS, 'less'), path.join(DIST, 'less', 'bootstrap'), next);
}

function bootstrapToScss(next) {
	fs.copy(BOOTSTRAP_SCSS, path.join(DIST, 'scss', 'bootstrap'), next);
}

function bootstrapToStyl(next) {
	fs.copy(BOOTSTRAP_STYL, path.join(DIST, 'styl', 'bootstrap'), next);
}

function bootstrapToCss(next) {
	fs.copy(path.join(BOOTSTRAP_LESS, 'dist', 'css'), path.join(DIST, 'css'), next);
}

function bootstrapAssets(next) {
	fs.copy(path.join(BOOTSTRAP_LESS, 'dist', 'fonts'), path.join(DIST, 'fonts'), function(err) {

		if (err) {
			return next(err);
		}

		fs.copy(path.join(BOOTSTRAP_LESS, 'dist', 'js'), path.join(DIST, 'js'), next);
	});
}

function docs(next) {
	fs.ensureDir(path.join(DOCS, 'dist'), function(err) {

		if (err) {
			return next(err);
		}

		child_process.execFile('sass', ['--sourcemap=none', '--update', path.join(DOCS, 'src') + ':' + path.join(DOCS, 'dist')], next);
	});
}