#!/usr/bin/env node

var child_process = require('child_process');
var path = require('path');

var async = require('async');
var fs = require('fs-extra');
var read = require('fs-readdir-recursive');
var replace = require('replace');
var rimraf = require('rimraf');

var utils = require('../lib/utils');

var SRC = path.join(__dirname, '..', 'src');
var DOCS = path.join(__dirname, '..', 'docs');

var BOOTSTRAP_LESS = path.join(__dirname, '..', 'node_modules', 'bootstrap');
var BOOTSTRAP_SCSS = path.join(__dirname, '..', 'node_modules', 'bootstrap-sass', 'assets', 'stylesheets');
var BOOTSTRAP_STYL = path.join(__dirname, '..', 'node_modules', 'bootstrap-styl', 'bootstrap');

module.exports.clean = function(next) {
	console.log('Clean up dist/ and docs/dist');

	async.series([
		rimraf.bind(undefined, utils.DIST),
		rimraf.bind(undefined, path.join(DOCS, 'dist'))
	], next);
};

module.exports.srcCopy = function(next) {
	console.log('Copy src/less and src/fonts to dist/*/');

	async.series([
		fs.copy.bind(undefined, path.join(SRC, 'less'), path.join(utils.DIST, 'less')),
		fs.copy.bind(undefined, path.join(SRC, 'fonts'), path.join(utils.DIST, 'fonts'))
	], next);
};

module.exports.lessToScss = function(next) {
	console.log('Convert less to scss');

	async.series([

		fs.copy.bind(undefined, path.join(utils.DIST, 'less'), path.join(utils.DIST, 'scss')),

		async.each.bind(undefined, read(path.join(utils.DIST, 'less')), function(file, callback) {
			utils.exec('less2sass', [path.join(utils.DIST, 'scss', file), '-o', path.join(utils.DIST, 'scss', file.replace(/^(.*[\/\\])?([^\/\\]+)\.less$/, '$1_$2.scss')), '-d'], callback);
		}),

		function(next) {

			// The Sass version of bootstrap has a subfolder
			replace({
				regex: /^(@import '\.\.\/bootstrap\/)(((?!(bootstrap)).)*';)$/gm,
				replacement: '$1bootstrap/$2',
				paths: [path.join(utils.DIST, 'scss')],
				recursive: true,
				silent: true,
			});

			// less2sass doesn't convert variable interpolation well
			// FIXME: https://github.com/brauliobo/less2sass/issues/10
			replace({

				// ${ttn-font-path}
				regex: /(\$)\{([^}]+)\}/g,

				// #{$icon-font-path}
				replacement: '#{$1$2}',

				paths: [path.join(utils.DIST, 'scss')],
				recursive: true,
				silent: true
			});

			// less doesn't has default variables because it lazy loads
			replace({

				// $ttn-fonth-path = "../fonts/";
				regex: /^(\$.+)(;)$/mg,

				// $ttn-fonth-path = "../fonts/" !default;
				replacement: '$1 !default$2',

				paths: [path.join(utils.DIST, 'scss')],
				recursive: true,
				silent: true,

				// except our overrides for bootstrap variables
				exclude: '_bootstrap-variables.scss'
			});

			next();
		}

	], next);
};

module.exports.scssToSass = function(next) {
	console.log('Convert scss to sass');

	async.series([

		fs.copy.bind(undefined, path.join(utils.DIST, 'scss'), path.join(utils.DIST, 'sass')),

		utils.exec.bind(undefined, 'sass-convert', [path.join(utils.DIST, 'sass'), '--recursive', '--from', 'scss', '--to', 'sass']),

		rimraf.bind(undefined, path.join(utils.DIST, 'sass', '**/*.scss'))

	], next);
};

module.exports.scssToCss = function(next) {
	console.log('Convert scss to css');

	async.series([

		fs.ensureDir.bind(undefined, path.join(utils.DIST, 'css')),

		utils.exec.bind(undefined, 'sass', ['--sourcemap=none', '--update', path.join(utils.DIST, 'scss', 'ttn', '_ttn.scss') + ':' + path.join(utils.DIST, 'css', 'ttn.css')])

	], next);
};

module.exports.lessToStyl = function(next) {
	console.log('Convert less to styl');

	async.series([

		fs.ensureDir.bind(undefined, path.join(utils.DIST, 'styl')),

		async.each.bind(undefined, read(path.join(SRC, 'less')), function(file, callback) {
			var targetPath = path.join(utils.DIST, 'styl', file.replace(/\.less$/, '.styl'));

			fs.ensureFile(targetPath, function(err) {

				var targetStream = fs.createWriteStream(targetPath, {
					flags: 'a'
				});

				var cmd = child_process.spawn('less2stylus', [path.join(utils.DIST, 'less', file)]);

				cmd.stdout.pipe(targetStream);

				var stderr;

				cmd.stderr.on('data', function(data) {
					stderr += data;
				});

				cmd.on('close', function(code) {

					if (code !== 0) {
						return callback(new Error(stderr || 'child process exited with code ' + code));
					}

					callback();
				});
			});
		}),

		function(next) {

			// stylus doesn't has default variables because it lazy loads
			replace({

				// ttn-fonth-path = "../fonts/"
				regex: /^^([a-z]+(?:-[a-z0-9]+)* )(=)/mg,

				// ttn-fonth-path ?= "../fonts/"
				replacement: '$1?$2',

				paths: [path.join(utils.DIST, 'styl')],
				recursive: true,
				silent: true,

				// except our overrides for bootstrap variables
				exclude: 'bootstrap-variables.styl'
			});

			next();
		}

	], next);
};

module.exports.bootstrapToLess = function(next) {
	console.log('Copy bootstrap to less');

	fs.copy(path.join(BOOTSTRAP_LESS, 'less'), path.join(utils.DIST, 'less', 'bootstrap'), next);
};

module.exports.bootstrapToScss = function(next) {
	console.log('Copy bootstrap to scss');

	fs.copy(BOOTSTRAP_SCSS, path.join(utils.DIST, 'scss', 'bootstrap'), next);
};

module.exports.bootstrapToStyl = function(next) {
	console.log('Copy bootstrap to styl');

	fs.copy(BOOTSTRAP_STYL, path.join(utils.DIST, 'styl', 'bootstrap'), next);
};

module.exports.bootstrapAssets = function(next) {
	console.log('Copy bootstrap assets');

	async.series([

		fs.copy.bind(undefined, path.join(BOOTSTRAP_LESS, 'dist', 'fonts'), path.join(utils.DIST, 'fonts')),

		fs.copy.bind(undefined, path.join(BOOTSTRAP_LESS, 'dist', 'js', 'bootstrap.js'), path.join(utils.DIST, 'js', 'bootstrap.js')),

		fs.copy.bind(undefined, path.join(BOOTSTRAP_LESS, 'dist', 'js', 'bootstrap.min.js'), path.join(utils.DIST, 'js', 'bootstrap.min.js'))

	], next);
};

module.exports.docs = function(next) {
	console.log('Update docs');

	async.series([

		fs.copy.bind(undefined, path.join(utils.DIST, 'fonts'), path.join(DOCS, 'dist', 'fonts')),

		fs.copy.bind(undefined, path.join(utils.DIST, 'js'), path.join(DOCS, 'dist', 'js')),

		utils.exec.bind(undefined, 'sass', ['--sourcemap=none', '--load-path', path.join(utils.DIST, 'scss'), '--update', path.join(DOCS, 'src', 'scss') + ':' + path.join(DOCS, 'dist', 'css')])

	], next);
};

function done(err, results) {
	if (err) {
		return console.error(err);
	} else {
		console.log('Done!');
	}
}

if (!module.parent) {

	// single task
	if (process.argv[2]) {
		module.exports[process.argv[2]](done);
	}

	// all tasks
	else {
		async.series([
			module.exports.clean,

			module.exports.srcCopy,
			module.exports.lessToScss,

			// we don't really need a Sass version (also had some issues)
			// module.exports.scssToSass,

			// less2styles needs imported bootstrap to be there
			module.exports.bootstrapToLess,
			module.exports.lessToStyl,

			// we don't really need a CSS version (also had some issues)
			// module.exports.scssToCss,

			module.exports.bootstrapToScss,
			module.exports.bootstrapToStyl,
			module.exports.bootstrapAssets,

			module.exports.docs

		], done);
	}
}